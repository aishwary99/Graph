About ->

{Depth First Search}
Just Like -> Preorder traversal !

DFS algorithm works in a manner similar to traversal of trees. Like preorder traversal , internally this algorithm also uses Stack.
The idea of DFS is just going forward (in depth) while there is any possibility, if not then backtrack. 
Backtrack -> It is a dead end , from where we move backward and choose a new path..

#Applications ->
1. Topological Sorting
2. Finding connected components
3. Solving puzzles such as mazes
4. Finding articulation points (cut vertices) of a graph

--------------------------------------------------------------------

void dfs(struct Graph *);
--------------------------

void dfs(struct Graph *G)
{
int startVertex;
int stack[1000];
int top,size;
top=size=1000;
int visited[G->V];

printf("Enter starting vertex: ");
scanf("%d",&startVertex);
if(startVertex<0) return;
for(int i=0;i<G->V;i++) visited[i]=0;

visited[startVertex]=1;
top--;
stack[top]=startVertex;

int element,i;
while(top!=size)
{
element=stack[top];
top++;
if(visited[element]!=1)
{
printf("%d ",element);
visited[element]=1;
}
for(i=(G->V)-1;i>=0;i--)
{
if(G->Adj[element][i]==1 && visited[i]!=1)
{
top--;
stack[top]=i;
}
}
}//loop ends here...
}//function ends here.....
